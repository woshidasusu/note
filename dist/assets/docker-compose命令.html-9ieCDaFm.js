import{_ as o,r as c,o as d,c as i,a as e,b as a,d as n,e as r}from"./app-_6xfh7q_.js";const l={},p=e("h1",{id:"docker-compose-命令",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker-compose-命令","aria-hidden":"true"},"#"),a(" docker-compose 命令")],-1),t=e("p",null,"参考资料：",-1),u={href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://yeasy.gitbooks.io/docker_practice/content/compose/commands.html",target:"_blank",rel:"noopener noreferrer"},m=r(`<p>docker-compose 命令是用来操作 docker-compose.yml 创建的各服务</p><p>而服务是 docker-compose 里的概念，docker 只有镜像和容器的概念，所以这里的服务，其实就类似于容器，命令基本也都跟 docker container 一致，用途也差不多</p><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h2><h3 id="up" tabindex="-1"><a class="header-anchor" href="#up" aria-hidden="true">#</a> up</h3><p>这是最重要命令，它是一键式命令，通过它，将尝试自动构建镜像、创建容器、启动容器、进行各种容器配置</p><p>等于说，我只要执行这个命令，docker-compose.yml 里所有的容器就都会从构建到运行全部都完成，我 docker 跑的各容器环境就好了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 一键创建、启动后台运行的容器, -d 表示后台运行</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>首次搭建可以执行这个命令，但后续如果只是修改了某些个别容器的配置，一般就需要带一些参数来执行了，不然这个命令默认会重新创建已经存在且运行中的容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 重新创建指定的服务容器，其他服务容器不受影响</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> --force-recreate <span class="token punctuation">[</span>服务名<span class="token punctuation">]</span>

<span class="token comment"># 启动处于终止状态的服务容器，不存在的容器会进行创建，处于运行中的不受影响</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> --no-recreate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然还有很多其他参数，但目前我这两种就够用了</p><p>注意，当修改了 docker-compose.yml 里某个服务的配置，需要让这个服务容器重新构建，配置才能生效，如果只是 stop 再启动，那容器还是原先那个</p><p>如果修改了服务容器的镜像 Dockerfile 文件，那需要让镜像重新构建，虽然也可以用参数，但我习惯用其他命令</p><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> config</h3><p>检查 docker-compose.yml 文件是否合法，修改完后，最好执行这个命令检查看看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 检查 docker-compose.yml 是否合法，合法则输出配置内容</span>
<span class="token function">docker-compose</span> config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> build</h3><p>构建指定的服务容器依赖的镜像，即使该镜像已经存在，一般当 Dockerfile 文件修改过时需要执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> build <span class="token punctuation">[</span>服务名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="down" tabindex="-1"><a class="header-anchor" href="#down" aria-hidden="true">#</a> down</h3><p>停止 up 命令启动的所有容器，并移出网络，慎用</p><h3 id="images" tabindex="-1"><a class="header-anchor" href="#images" aria-hidden="true">#</a> images</h3><p>列出 docker-compose.yml 文件中所有的镜像，是 docker images 的子集</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="logs" tabindex="-1"><a class="header-anchor" href="#logs" aria-hidden="true">#</a> logs</h3><p>查看容器的输出，跟 docker logs 的区别在于，这里会以颜色来区分不同的服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> logs <span class="token punctuation">[</span>服务名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ps" tabindex="-1"><a class="header-anchor" href="#ps" aria-hidden="true">#</a> ps</h3><p>列出 docker-compose 管理的所有容器进程，是 docker ps 的自己</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="top" tabindex="-1"><a class="header-anchor" href="#top" aria-hidden="true">#</a> top</h3><p>查看各个服务容器内运行的进程，ps 是查看宿主机，top 是查看容器内</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token function">top</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="stop" tabindex="-1"><a class="header-anchor" href="#stop" aria-hidden="true">#</a> stop</h3><p>停止处于运行中的服务容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> stop <span class="token punctuation">[</span>服务名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="rm" tabindex="-1"><a class="header-anchor" href="#rm" aria-hidden="true">#</a> rm</h3><p>删除停止状态的服务容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token function">rm</span> <span class="token punctuation">[</span>服务名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,38);function b(v,k){const s=c("ExternalLinkIcon");return d(),i("div",null,[p,t,e("ul",null,[e("li",null,[e("a",u,[a("官方文档"),n(s)])]),e("li",null,[e("a",h,[a("Docker Compose 命令说明"),n(s)])])]),m])}const f=o(l,[["render",b],["__file","docker-compose命令.html.vue"]]);export{f as default};
