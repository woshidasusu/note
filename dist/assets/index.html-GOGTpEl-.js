import{_ as s,o as a,c as n,e as l}from"./app-X_F-Q7Je.js";const e={},p=l(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> java</h1><p>java 后端（spring-boot）项目，部署常用命令：</p><h2 id="jar" tabindex="-1"><a class="header-anchor" href="#jar" aria-hidden="true">#</a> jar</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># jar命令格式</span></span>
<span class="line"><span style="color:#DCDCAA;">jar</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">{ctxuf}</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">文件名</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，{ctxu} 是个参数必选其一，表示此次 jar 命令要处理的事情，其余为可选参数，通常都会携带 -vf 参数，输出此次命令的报告，且可指定操作的文件</p><p><strong>-c</strong>： 创建一个 jar 包</p><p><strong>-t</strong>： 显示 jar 中内容列表</p><p><strong>-x</strong>： 解压 jar 包</p><p><strong>-u</strong>： 添加文件到 jar 包中</p><p><strong>-f</strong>： 指定 jar 包的文件名</p><p><strong>-v</strong>： 生成详情报告，并输出至标准设备</p><h3 id="解压-jar-包" tabindex="-1"><a class="header-anchor" href="#解压-jar-包" aria-hidden="true">#</a> 解压 jar 包</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 解压 jar 包内容至当前目录</span></span>
<span class="line"><span style="color:#DCDCAA;">jar</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">xvf</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">xxx.jar</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包-jar-包" tabindex="-1"><a class="header-anchor" href="#打包-jar-包" aria-hidden="true">#</a> 打包 jar 包</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 将当前目录下的文件，打包进 jar 包</span></span>
<span class="line"><span style="color:#DCDCAA;">jar</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">cvf</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">xxx.jar</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">./</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加文件至-jar-包" tabindex="-1"><a class="header-anchor" href="#添加文件至-jar-包" aria-hidden="true">#</a> 添加文件至 jar 包</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 将application.yml文件添加进 jar 包，外部文件的目录层级需与 jar 包内一致</span></span>
<span class="line"><span style="color:#DCDCAA;">jar</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">uf</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">xxx.jar</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">BOOT-INF/classes/application.yml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提取-jar-包中的文件" tabindex="-1"><a class="header-anchor" href="#提取-jar-包中的文件" aria-hidden="true">#</a> 提取 jar 包中的文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># jar 命令只能全部解压，想要只解压某个文件，可用 unzip 命令</span></span>
<span class="line"><span style="color:#DCDCAA;">unzip</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-j</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">xxx.jar</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">BOOT-INF/classes/application.yml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># unzip 命令也可用来解压 jar 包，有 -d 参数时指定解压的目录</span></span>
<span class="line"><span style="color:#DCDCAA;">unzip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">xxx.jar</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-d</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">xxx</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nohup" tabindex="-1"><a class="header-anchor" href="#nohup" aria-hidden="true">#</a> nohup</h2><p>nohup 是 linux 命令，后端 jar 包的运行，通常可用 nohup 命令来执行</p><p>nohup 开始，&amp; 结尾，表示后台运行该命令，否则就会在前台运行</p><h3 id="jar-包运行" tabindex="-1"><a class="header-anchor" href="#jar-包运行" aria-hidden="true">#</a> jar 包运行</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 后台运行jar包</span></span>
<span class="line"><span style="color:#DCDCAA;">nohup</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">java</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-jar</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">xxx.jar</span><span style="color:#D4D4D4;"> &amp; </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="输出重定向" tabindex="-1"><a class="header-anchor" href="#输出重定向" aria-hidden="true">#</a> 输出重定向</h3><p>当用 &amp; 设置后台运行时，此时日志就不会再前台输出，如果想看日志，可以利用输出重定向</p><p>操作系统中有三个常用的流：</p><ul><li>0：标准输入流 stdin</li><li>1：标准输出流 stdout</li><li>2：标准错误流 stderr</li></ul><p>一般当我们用 <code>&gt; console.txt</code>，实际是 <code>1&gt;console.txt</code> 的省略用法；</p><p><code>&lt; console.txt</code> ，实际是 <code>0 &lt; console.txt</code> 的省略用法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 日志写入 xxx.log 文件，同时执行 tail -f 将日志输出到前台终端</span></span>
<span class="line"><span style="color:#DCDCAA;">nohup</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">java</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-jar</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">xxx.jar</span><span style="color:#D4D4D4;"> &gt;&gt; </span><span style="color:#CE9178;">xxx.log</span><span style="color:#D4D4D4;"> 2&gt;&amp;1 &amp; </span><span style="color:#DCDCAA;">tail</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-f</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">xxx.log</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&gt;&gt; xxx.log</code> 表示将执行日志以追加的方式写入 xxx.log 文件</p><p><code>2&gt;&amp;1</code> 表示将标准错误流重定向到标准输出流</p><h3 id="查看-jar-程序运作状况" tabindex="-1"><a class="header-anchor" href="#查看-jar-程序运作状况" aria-hidden="true">#</a> 查看 jar 程序运作状况</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># grep 可根据关键字过滤程序,a:显示所有程序 u:以用户为主的格式来显示 x:显示所有程序，不以终端机来区分</span></span>
<span class="line"><span style="color:#DCDCAA;">ps</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">aux</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">grep</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">java</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="杀死-jar-程序进程" tabindex="-1"><a class="header-anchor" href="#杀死-jar-程序进程" aria-hidden="true">#</a> 杀死 jar 程序进程</h3><p>grep 过滤的结果，最后一条记录总会是 grep 本身的进程，可用 <code>grep -v gerp</code> 过滤掉，再结合 awk 提取进程号，就可直接用 kill 杀掉</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">kill</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-9</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">\`</span><span style="color:#DCDCAA;">ps</span><span style="color:#CE9178;"> aux</span><span style="color:#D4D4D4;">|</span><span style="color:#DCDCAA;">grep</span><span style="color:#CE9178;"> &#39;xxx&#39;</span><span style="color:#D4D4D4;">|</span><span style="color:#DCDCAA;">grep</span><span style="color:#CE9178;"> </span><span style="color:#569CD6;">-v</span><span style="color:#CE9178;"> grep</span><span style="color:#D4D4D4;">|</span><span style="color:#DCDCAA;">awk</span><span style="color:#CE9178;"> &#39;{print $2}&#39;\`</span><span style="color:#D4D4D4;">      </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,38),r=[p];function o(c,i){return a(),n("div",null,r)}const t=s(e,[["render",o],["__file","index.html.vue"]]);export{t as default};
